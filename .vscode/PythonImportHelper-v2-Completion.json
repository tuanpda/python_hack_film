[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Pagination",
        "importPath": "flask_paginate",
        "description": "flask_paginate",
        "isExtraImport": true,
        "detail": "flask_paginate",
        "documentation": {}
    },
    {
        "label": "get_page_args",
        "importPath": "flask_paginate",
        "description": "flask_paginate",
        "isExtraImport": true,
        "detail": "flask_paginate",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "get_videos_phimle",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_videos_phimle(offset=0, per_page=2):\n    return data_videos_phimle[offset: offset + per_page]\ndef get_videos_chieurap(offset=0, per_page=2):\n    return data_videos_phimchieurap[offset: offset + per_page]\n@app.route('/')\ndef home():\n    sampled_list = random.sample(data_videos_phimle, 5)\n    # print(sampled_list)\n    return render_template('index.html', all_posts=get_top_phimle, all_posts_chieurap=get_top_phimchieurap, random_videos=sampled_list)\n@app.route('/<int:index>')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_videos_chieurap",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_videos_chieurap(offset=0, per_page=2):\n    return data_videos_phimchieurap[offset: offset + per_page]\n@app.route('/')\ndef home():\n    sampled_list = random.sample(data_videos_phimle, 5)\n    # print(sampled_list)\n    return render_template('index.html', all_posts=get_top_phimle, all_posts_chieurap=get_top_phimchieurap, random_videos=sampled_list)\n@app.route('/<int:index>')\ndef show_post_le(index):\n    requested_post = None",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def home():\n    sampled_list = random.sample(data_videos_phimle, 5)\n    # print(sampled_list)\n    return render_template('index.html', all_posts=get_top_phimle, all_posts_chieurap=get_top_phimchieurap, random_videos=sampled_list)\n@app.route('/<int:index>')\ndef show_post_le(index):\n    requested_post = None\n    link_iframe = None\n    for blog_post in data_videos_phimle:\n        if blog_post[\"_id\"] == index:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "show_post_le",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def show_post_le(index):\n    requested_post = None\n    link_iframe = None\n    for blog_post in data_videos_phimle:\n        if blog_post[\"_id\"] == index:\n            requested_post = blog_post\n            link_iframe = requested_post['link_play']\n            # print(link_iframe)\n    return render_template(\"single.html\", post=requested_post, all_iframe=link_iframe, all_posts=get_some_phimle_single)\n@app.route('/phimle-posts')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "all_phimle",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def all_phimle():\n    page, per_page, offset = get_page_args(\n        page_parameter=\"page\", per_page_parameter=\"per_page\")\n    total = len(data_videos_phimle)\n    pagination_data_videos_phimle = get_videos_phimle(\n        offset=offset, per_page=per_page)\n    pagination = Pagination(page=page, per_page=per_page,\n                            total=total)\n    return render_template(\"phimle.html\", all_phimle=pagination_data_videos_phimle, page=page, per_page=per_page, pagination=pagination)\n@app.route('/phimchieurap-posts')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "all_phimchieurap",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def all_phimchieurap():\n    page, per_page, offset = get_page_args(\n        page_parameter=\"page\", per_page_parameter=\"per_page\")\n    total = len(data_videos_phimchieurap)\n    pagination_data_videos_phimchieurap = get_videos_chieurap(\n        offset=offset, per_page=per_page)\n    pagination = Pagination(page=page, per_page=per_page,\n                            total=total, css_framework='bootstrap4')\n    return render_template(\"phimchieurap.html\", all_phimchieurap=pagination_data_videos_phimchieurap, page=page, per_page=per_page, pagination=pagination)\nif __name__ == \"__main__\":",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_top_phimle",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "get_top_phimle = []\nfor feed in data_videos_phimle[:24]:\n    get_top_phimle.append(feed)\n# get top film chiếu rạp\nget_top_phimchieurap = []\nfor feed in data_videos_phimchieurap[:24]:\n    get_top_phimchieurap.append(feed)\n# get some film sigle phim le page\nget_some_phimle_single = []\nfor feed in data_videos_phimle[:12]:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_top_phimchieurap",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "get_top_phimchieurap = []\nfor feed in data_videos_phimchieurap[:24]:\n    get_top_phimchieurap.append(feed)\n# get some film sigle phim le page\nget_some_phimle_single = []\nfor feed in data_videos_phimle[:12]:\n    get_some_phimle_single.append(feed)\n# get some film sigle phim chiếu rạp page\nget_some_chieurap_single = []\nfor feed in data_videos_phimchieurap[:12]:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_some_phimle_single",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "get_some_phimle_single = []\nfor feed in data_videos_phimle[:12]:\n    get_some_phimle_single.append(feed)\n# get some film sigle phim chiếu rạp page\nget_some_chieurap_single = []\nfor feed in data_videos_phimchieurap[:12]:\n    get_some_chieurap_single.append(feed)\n# view_link\napp = Flask(__name__)\ndef get_videos_phimle(offset=0, per_page=2):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_some_chieurap_single",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "get_some_chieurap_single = []\nfor feed in data_videos_phimchieurap[:12]:\n    get_some_chieurap_single.append(feed)\n# view_link\napp = Flask(__name__)\ndef get_videos_phimle(offset=0, per_page=2):\n    return data_videos_phimle[offset: offset + per_page]\ndef get_videos_chieurap(offset=0, per_page=2):\n    return data_videos_phimchieurap[offset: offset + per_page]\n@app.route('/')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\ndef get_videos_phimle(offset=0, per_page=2):\n    return data_videos_phimle[offset: offset + per_page]\ndef get_videos_chieurap(offset=0, per_page=2):\n    return data_videos_phimchieurap[offset: offset + per_page]\n@app.route('/')\ndef home():\n    sampled_list = random.sample(data_videos_phimle, 5)\n    # print(sampled_list)\n    return render_template('index.html', all_posts=get_top_phimle, all_posts_chieurap=get_top_phimchieurap, random_videos=sampled_list)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "add_videos",
        "kind": 2,
        "importPath": "get_data_videos",
        "description": "get_data_videos",
        "peekOfCode": "def add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}\n    new_video[\"_id\"] = _id\n    new_video[\"title\"] = video_title\n    new_video[\"link\"] = video_link\n    new_video[\"mode\"] = video_mode\n    new_video[\"image\"] = video_image  \n    new_video[\"link_play\"] = link_play\n    videos.append(new_video)\n# tìm tất cả video từ thẻ div",
        "detail": "get_data_videos",
        "documentation": {}
    },
    {
        "label": "link_web",
        "kind": 5,
        "importPath": "get_data_videos",
        "description": "get_data_videos",
        "peekOfCode": "link_web = 'https://hfim.tk/series'\nresponse = requests.get(link_web)\n# encoding tiếng việt - fix lỗi font \nresponse.encoding = response.apparent_encoding\ndata_web = response.text\nsoup = BeautifulSoup(data_web, \"html.parser\")\nvideos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}",
        "detail": "get_data_videos",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "get_data_videos",
        "description": "get_data_videos",
        "peekOfCode": "response = requests.get(link_web)\n# encoding tiếng việt - fix lỗi font \nresponse.encoding = response.apparent_encoding\ndata_web = response.text\nsoup = BeautifulSoup(data_web, \"html.parser\")\nvideos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}\n    new_video[\"_id\"] = _id",
        "detail": "get_data_videos",
        "documentation": {}
    },
    {
        "label": "response.encoding",
        "kind": 5,
        "importPath": "get_data_videos",
        "description": "get_data_videos",
        "peekOfCode": "response.encoding = response.apparent_encoding\ndata_web = response.text\nsoup = BeautifulSoup(data_web, \"html.parser\")\nvideos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}\n    new_video[\"_id\"] = _id\n    new_video[\"title\"] = video_title\n    new_video[\"link\"] = video_link",
        "detail": "get_data_videos",
        "documentation": {}
    },
    {
        "label": "data_web",
        "kind": 5,
        "importPath": "get_data_videos",
        "description": "get_data_videos",
        "peekOfCode": "data_web = response.text\nsoup = BeautifulSoup(data_web, \"html.parser\")\nvideos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}\n    new_video[\"_id\"] = _id\n    new_video[\"title\"] = video_title\n    new_video[\"link\"] = video_link\n    new_video[\"mode\"] = video_mode",
        "detail": "get_data_videos",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "get_data_videos",
        "description": "get_data_videos",
        "peekOfCode": "soup = BeautifulSoup(data_web, \"html.parser\")\nvideos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}\n    new_video[\"_id\"] = _id\n    new_video[\"title\"] = video_title\n    new_video[\"link\"] = video_link\n    new_video[\"mode\"] = video_mode\n    new_video[\"image\"] = video_image  ",
        "detail": "get_data_videos",
        "documentation": {}
    },
    {
        "label": "videos",
        "kind": 5,
        "importPath": "get_data_videos",
        "description": "get_data_videos",
        "peekOfCode": "videos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}\n    new_video[\"_id\"] = _id\n    new_video[\"title\"] = video_title\n    new_video[\"link\"] = video_link\n    new_video[\"mode\"] = video_mode\n    new_video[\"image\"] = video_image  \n    new_video[\"link_play\"] = link_play",
        "detail": "get_data_videos",
        "documentation": {}
    },
    {
        "label": "articles_div_video",
        "kind": 5,
        "importPath": "get_data_videos",
        "description": "get_data_videos",
        "peekOfCode": "articles_div_video = soup.find_all(name=\"div\", class_=\"ml-item\")\nfor video in articles_div_video:\n    a_tag = video.find('a')\n    title_video = a_tag.get('oldtitle')\n    # print(title_video)\n    href_video = a_tag.get('href')\n    link_video = urljoin(link_web, href_video)\n    # print(urljoin(link_web, href_video))\n    span_tag = video.find('span')\n    mode_video = span_tag.text",
        "detail": "get_data_videos",
        "documentation": {}
    },
    {
        "label": "add_videos",
        "kind": 2,
        "importPath": "server_hfilm",
        "description": "server_hfilm",
        "peekOfCode": "def add_videos(_id, video_title, video_link, video_mode, video_image, link_play, video_descript):\n    new_video = {}\n    new_video[\"_id\"] = _id\n    new_video[\"title\"] = video_title\n    new_video[\"link\"] = video_link\n    new_video[\"mode\"] = video_mode\n    new_video[\"image\"] = video_image  \n    new_video[\"link_play\"] = link_play\n    new_video[\"descript\"] = video_descript\n    videos.append(new_video)",
        "detail": "server_hfilm",
        "documentation": {}
    },
    {
        "label": "get_page_one",
        "kind": 2,
        "importPath": "server_hfilm",
        "description": "server_hfilm",
        "peekOfCode": "def get_page_one():\n    link_web = 'https://hfim.tk/the-loai/phim-le'\n    response = requests.get(link_web)\n    # encoding tiếng việt - fix lỗi font \n    response.encoding = response.apparent_encoding\n    data_web = response.text\n    soup = BeautifulSoup(data_web, \"html.parser\")\n    # tìm tất cả video từ thẻ div\n    articles_div_video = soup.find_all(name=\"div\", class_=\"ml-item\")\n    for video in articles_div_video:",
        "detail": "server_hfilm",
        "documentation": {}
    },
    {
        "label": "get_page_another",
        "kind": 2,
        "importPath": "server_hfilm",
        "description": "server_hfilm",
        "peekOfCode": "def get_page_another():\n    get_num_page = 3\n    page = 2\n    link_web = 'https://hfim.tk/the-loai/phim-le'\n    link_web_page = 'https://hfim.tk/the-loai/phim-le/page/'\n    while (page <= get_num_page):\n        get_page = str(page)\n        link_full = urljoin(link_web_page, get_page)\n        # print(link_full)\n        response = requests.get(link_full)",
        "detail": "server_hfilm",
        "documentation": {}
    },
    {
        "label": "server_phimle",
        "kind": 2,
        "importPath": "server_hfilm",
        "description": "server_hfilm",
        "peekOfCode": "def server_phimle():\n    get_page_one() \n    get_page_another()\n    with open(\"z_data_hfilm_le.json\", \"w\", encoding='utf-8') as write_file:\n        json.dump(videos, write_file, ensure_ascii=False)\n# get page 1 phim chiếu rạp\ndef get_page_one_chieu_rap():\n    link_web = 'https://hfim.tk/the-loai/phim-chieu-rap'\n    response = requests.get(link_web)\n    # encoding tiếng việt - fix lỗi font ",
        "detail": "server_hfilm",
        "documentation": {}
    },
    {
        "label": "get_page_one_chieu_rap",
        "kind": 2,
        "importPath": "server_hfilm",
        "description": "server_hfilm",
        "peekOfCode": "def get_page_one_chieu_rap():\n    link_web = 'https://hfim.tk/the-loai/phim-chieu-rap'\n    response = requests.get(link_web)\n    # encoding tiếng việt - fix lỗi font \n    response.encoding = response.apparent_encoding\n    data_web = response.text\n    soup = BeautifulSoup(data_web, \"html.parser\")\n    # tìm tất cả video từ thẻ div\n    articles_div_video = soup.find_all(name=\"div\", class_=\"ml-item\")\n    for video in articles_div_video:",
        "detail": "server_hfilm",
        "documentation": {}
    },
    {
        "label": "get_page_another_chieurap",
        "kind": 2,
        "importPath": "server_hfilm",
        "description": "server_hfilm",
        "peekOfCode": "def get_page_another_chieurap():\n    get_num_page = 40\n    page = 2\n    link_web = 'https://hfim.tk/the-loai/phim-chieu-rap'\n    link_web_page = 'https://hfim.tk/the-loai/phim-chieu-rap/page/'\n    while (page <= get_num_page):\n        get_page = str(page)\n        link_full = urljoin(link_web_page, get_page)\n        # print(link_full)\n        response = requests.get(link_full)",
        "detail": "server_hfilm",
        "documentation": {}
    },
    {
        "label": "server_phimchieurap",
        "kind": 2,
        "importPath": "server_hfilm",
        "description": "server_hfilm",
        "peekOfCode": "def server_phimchieurap():\n    get_page_one_chieu_rap() \n    # get_page_another_chieurap()\n    with open(\"z_data_hfilm_chieurap.json\", \"w\", encoding='utf-8') as write_file:\n        json.dump(videos, write_file, ensure_ascii=False)\n# running\nserver_phimle()\n# server_phimchieurap()",
        "detail": "server_hfilm",
        "documentation": {}
    },
    {
        "label": "videos",
        "kind": 5,
        "importPath": "server_hfilm",
        "description": "server_hfilm",
        "peekOfCode": "videos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play, video_descript):\n    new_video = {}\n    new_video[\"_id\"] = _id\n    new_video[\"title\"] = video_title\n    new_video[\"link\"] = video_link\n    new_video[\"mode\"] = video_mode\n    new_video[\"image\"] = video_image  \n    new_video[\"link_play\"] = link_play",
        "detail": "server_hfilm",
        "documentation": {}
    },
    {
        "label": "add_videos",
        "kind": 2,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "def add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}\n    new_video[\"_id\"] = _id\n    new_video[\"title\"] = video_title\n    new_video[\"link\"] = video_link\n    new_video[\"mode\"] = video_mode\n    new_video[\"image\"] = video_image\n    new_video[\"link_play\"] = link_play\n    videos.append(new_video)\narticles_div_video = soup.find(name=\"div\", class_=\"halim-item\")",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "link_web",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "link_web = 'https://fullphimzz.net/phim-le/'\nresponse = requests.get(link_web)\n# encoding tiếng việt - fix lỗi font\nresponse.encoding = response.apparent_encoding\ndata_web = response.text\nsoup = BeautifulSoup(data_web, \"html.parser\")\nvideos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "response = requests.get(link_web)\n# encoding tiếng việt - fix lỗi font\nresponse.encoding = response.apparent_encoding\ndata_web = response.text\nsoup = BeautifulSoup(data_web, \"html.parser\")\nvideos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}\n    new_video[\"_id\"] = _id",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "response.encoding",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "response.encoding = response.apparent_encoding\ndata_web = response.text\nsoup = BeautifulSoup(data_web, \"html.parser\")\nvideos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}\n    new_video[\"_id\"] = _id\n    new_video[\"title\"] = video_title\n    new_video[\"link\"] = video_link",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "data_web",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "data_web = response.text\nsoup = BeautifulSoup(data_web, \"html.parser\")\nvideos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}\n    new_video[\"_id\"] = _id\n    new_video[\"title\"] = video_title\n    new_video[\"link\"] = video_link\n    new_video[\"mode\"] = video_mode",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "soup = BeautifulSoup(data_web, \"html.parser\")\nvideos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}\n    new_video[\"_id\"] = _id\n    new_video[\"title\"] = video_title\n    new_video[\"link\"] = video_link\n    new_video[\"mode\"] = video_mode\n    new_video[\"image\"] = video_image",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "videos",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "videos = []\n# add video\ndef add_videos(_id, video_title, video_link, video_mode, video_image, link_play):\n    new_video = {}\n    new_video[\"_id\"] = _id\n    new_video[\"title\"] = video_title\n    new_video[\"link\"] = video_link\n    new_video[\"mode\"] = video_mode\n    new_video[\"image\"] = video_image\n    new_video[\"link_play\"] = link_play",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "articles_div_video",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "articles_div_video = soup.find(name=\"div\", class_=\"halim-item\")\na_tag = articles_div_video.find('a')\ntitle = a_tag.get('title')\n# print(title)\nlink = a_tag.get('href')\n# href = urljoin(link_web,link)\n# print(link)\nmode_tag = articles_div_video.find('span', class_='status')\n# print(mode_tag.text)\nimg_tag = articles_div_video.find('img')",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "a_tag",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "a_tag = articles_div_video.find('a')\ntitle = a_tag.get('title')\n# print(title)\nlink = a_tag.get('href')\n# href = urljoin(link_web,link)\n# print(link)\nmode_tag = articles_div_video.find('span', class_='status')\n# print(mode_tag.text)\nimg_tag = articles_div_video.find('img')\nimg_vd = img_tag.get('src')",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "title = a_tag.get('title')\n# print(title)\nlink = a_tag.get('href')\n# href = urljoin(link_web,link)\n# print(link)\nmode_tag = articles_div_video.find('span', class_='status')\n# print(mode_tag.text)\nimg_tag = articles_div_video.find('img')\nimg_vd = img_tag.get('src')\n# print(img_vd)",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "link",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "link = a_tag.get('href')\n# href = urljoin(link_web,link)\n# print(link)\nmode_tag = articles_div_video.find('span', class_='status')\n# print(mode_tag.text)\nimg_tag = articles_div_video.find('img')\nimg_vd = img_tag.get('src')\n# print(img_vd)\nview_film = 'xem-phim/'\nlink_film_origin = 'https://fullphimzz.net/'",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "mode_tag",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "mode_tag = articles_div_video.find('span', class_='status')\n# print(mode_tag.text)\nimg_tag = articles_div_video.find('img')\nimg_vd = img_tag.get('src')\n# print(img_vd)\nview_film = 'xem-phim/'\nlink_film_origin = 'https://fullphimzz.net/'\n# print(link.replace('https://fullphimzz.net/', ''))\nremove_link_1 = link.replace('https://fullphimzz.net/', '')\nremove_link_2 = remove_link_1.replace('/', '')",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "img_tag",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "img_tag = articles_div_video.find('img')\nimg_vd = img_tag.get('src')\n# print(img_vd)\nview_film = 'xem-phim/'\nlink_film_origin = 'https://fullphimzz.net/'\n# print(link.replace('https://fullphimzz.net/', ''))\nremove_link_1 = link.replace('https://fullphimzz.net/', '')\nremove_link_2 = remove_link_1.replace('/', '')\nview_core = '-tap-1-sv-1/'\nlink_film_data = link_film_origin+view_film+remove_link_2+view_core",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "img_vd",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "img_vd = img_tag.get('src')\n# print(img_vd)\nview_film = 'xem-phim/'\nlink_film_origin = 'https://fullphimzz.net/'\n# print(link.replace('https://fullphimzz.net/', ''))\nremove_link_1 = link.replace('https://fullphimzz.net/', '')\nremove_link_2 = remove_link_1.replace('/', '')\nview_core = '-tap-1-sv-1/'\nlink_film_data = link_film_origin+view_film+remove_link_2+view_core\n# print(link_film_data)",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "view_film",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "view_film = 'xem-phim/'\nlink_film_origin = 'https://fullphimzz.net/'\n# print(link.replace('https://fullphimzz.net/', ''))\nremove_link_1 = link.replace('https://fullphimzz.net/', '')\nremove_link_2 = remove_link_1.replace('/', '')\nview_core = '-tap-1-sv-1/'\nlink_film_data = link_film_origin+view_film+remove_link_2+view_core\n# print(link_film_data)\nget_video_sgl = requests.get('https://fullphimzz.net/xem-phim/doan-bang-kinh-hoang-99-tap-1-sv-1/')\ndata_web_sgl = get_video_sgl.text",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "link_film_origin",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "link_film_origin = 'https://fullphimzz.net/'\n# print(link.replace('https://fullphimzz.net/', ''))\nremove_link_1 = link.replace('https://fullphimzz.net/', '')\nremove_link_2 = remove_link_1.replace('/', '')\nview_core = '-tap-1-sv-1/'\nlink_film_data = link_film_origin+view_film+remove_link_2+view_core\n# print(link_film_data)\nget_video_sgl = requests.get('https://fullphimzz.net/xem-phim/doan-bang-kinh-hoang-99-tap-1-sv-1/')\ndata_web_sgl = get_video_sgl.text\nsoup_sgl = BeautifulSoup(data_web_sgl, \"html.parser\")",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "remove_link_1",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "remove_link_1 = link.replace('https://fullphimzz.net/', '')\nremove_link_2 = remove_link_1.replace('/', '')\nview_core = '-tap-1-sv-1/'\nlink_film_data = link_film_origin+view_film+remove_link_2+view_core\n# print(link_film_data)\nget_video_sgl = requests.get('https://fullphimzz.net/xem-phim/doan-bang-kinh-hoang-99-tap-1-sv-1/')\ndata_web_sgl = get_video_sgl.text\nsoup_sgl = BeautifulSoup(data_web_sgl, \"html.parser\")\nprint(soup_sgl)\ndiv_vd = soup_sgl.find('iframe')",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "remove_link_2",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "remove_link_2 = remove_link_1.replace('/', '')\nview_core = '-tap-1-sv-1/'\nlink_film_data = link_film_origin+view_film+remove_link_2+view_core\n# print(link_film_data)\nget_video_sgl = requests.get('https://fullphimzz.net/xem-phim/doan-bang-kinh-hoang-99-tap-1-sv-1/')\ndata_web_sgl = get_video_sgl.text\nsoup_sgl = BeautifulSoup(data_web_sgl, \"html.parser\")\nprint(soup_sgl)\ndiv_vd = soup_sgl.find('iframe')\n# print(div_vd)",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "view_core",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "view_core = '-tap-1-sv-1/'\nlink_film_data = link_film_origin+view_film+remove_link_2+view_core\n# print(link_film_data)\nget_video_sgl = requests.get('https://fullphimzz.net/xem-phim/doan-bang-kinh-hoang-99-tap-1-sv-1/')\ndata_web_sgl = get_video_sgl.text\nsoup_sgl = BeautifulSoup(data_web_sgl, \"html.parser\")\nprint(soup_sgl)\ndiv_vd = soup_sgl.find('iframe')\n# print(div_vd)\n# ifream = div_vd.find('iframe')",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "link_film_data",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "link_film_data = link_film_origin+view_film+remove_link_2+view_core\n# print(link_film_data)\nget_video_sgl = requests.get('https://fullphimzz.net/xem-phim/doan-bang-kinh-hoang-99-tap-1-sv-1/')\ndata_web_sgl = get_video_sgl.text\nsoup_sgl = BeautifulSoup(data_web_sgl, \"html.parser\")\nprint(soup_sgl)\ndiv_vd = soup_sgl.find('iframe')\n# print(div_vd)\n# ifream = div_vd.find('iframe')\n# src_ifrm = ifream.get('src')",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "get_video_sgl",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "get_video_sgl = requests.get('https://fullphimzz.net/xem-phim/doan-bang-kinh-hoang-99-tap-1-sv-1/')\ndata_web_sgl = get_video_sgl.text\nsoup_sgl = BeautifulSoup(data_web_sgl, \"html.parser\")\nprint(soup_sgl)\ndiv_vd = soup_sgl.find('iframe')\n# print(div_vd)\n# ifream = div_vd.find('iframe')\n# src_ifrm = ifream.get('src')\n# print(src_ifrm)\n# tìm tất cả video từ thẻ div",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "data_web_sgl",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "data_web_sgl = get_video_sgl.text\nsoup_sgl = BeautifulSoup(data_web_sgl, \"html.parser\")\nprint(soup_sgl)\ndiv_vd = soup_sgl.find('iframe')\n# print(div_vd)\n# ifream = div_vd.find('iframe')\n# src_ifrm = ifream.get('src')\n# print(src_ifrm)\n# tìm tất cả video từ thẻ div\n# articles_div_video = soup.find_all(name=\"div\", class_=\"ml-item\")",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "soup_sgl",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "soup_sgl = BeautifulSoup(data_web_sgl, \"html.parser\")\nprint(soup_sgl)\ndiv_vd = soup_sgl.find('iframe')\n# print(div_vd)\n# ifream = div_vd.find('iframe')\n# src_ifrm = ifream.get('src')\n# print(src_ifrm)\n# tìm tất cả video từ thẻ div\n# articles_div_video = soup.find_all(name=\"div\", class_=\"ml-item\")\n# for video in articles_div_video:",
        "detail": "try",
        "documentation": {}
    },
    {
        "label": "div_vd",
        "kind": 5,
        "importPath": "try",
        "description": "try",
        "peekOfCode": "div_vd = soup_sgl.find('iframe')\n# print(div_vd)\n# ifream = div_vd.find('iframe')\n# src_ifrm = ifream.get('src')\n# print(src_ifrm)\n# tìm tất cả video từ thẻ div\n# articles_div_video = soup.find_all(name=\"div\", class_=\"ml-item\")\n# for video in articles_div_video:\n#     a_tag = video.find('a')\n#     title_video = a_tag.get('oldtitle')",
        "detail": "try",
        "documentation": {}
    }
]